1:
    * Ještě jednou dobré dopoledne. Já jsem Dominik Harmim. *

    V mé diplomové práci jsem rozšiřoval a vylepšoval Atomer - nástroj pro statickou
    detekci porušení atomicity v paralelních programech, který byl vytvořen už v
    rámci má bakalářské práce jako zásuvný modul aplikačního rámce Facebook
    Infer.

2:
    Atomer provádí ověřování atomicity určitých sekvencí volání funkcí.
    Tohle je často vyžadováno v paralelních programech. Porušení
    atomicity může mít vážné následky.
    Máme tady uvedený motivační příklad, kde lze analyzátor porušení atomicity
    použít. Máme tady příklad funkce `invoke`, která zjišťuje, jestli
    je daná metoda zaregistrovaná na určitém serveru funkcí `is_registered`.
    Pokud ano, tak ji zavolá funkcí `invoke`. Tyto dvě funkce by měly být
    volány atomicky. V opačném případě může dojít k tomu, že například nějaké
    paralelní vlákno danou metodu ze serveru odregistruje právě mezi touto
    dvojicí volání funkcí. Potom bude zavolána na serveru
    neregistrovaná metoda, což může způsobit neočekávané chování.

3:
    Na úvod ještě řeknu něco o samotném nástroji Facebook Infer.
    Jedná se o volně šířený aplikační rámec pro interprocedurální statickou
    analýzu programů. Je založený na abstraktní interpretaci.
    Klade důraz na škálovatelnost, která je způsobená analýzou samostatných
    funkcí směrem od listů stromů ke kořenům, jak je naznačeno na tomto
    slajdu. Infer provádí kompoziční analýzu
    tím, že pro každou funkci je spočítán její souhrn (tzv. `summary`)
    nezávisle na kontextu, ve kterém se funkce nachází. Tzn., že pro každou
    funkci je spočítáno, za jakých předpokladů lze po provedení funkce
    vyvodit jaké důsledky. Infer
    podporuje analýzu programů napsaných v jazycích Java, C, C++, Objective-C a C#.

4:
    Teď o analyzátoru Atomer, který jsem rozšiřoval. Jak už jsem zmiňoval, jedná se
    o analyzátor, který detekuje porušení atomicity pro sekvence volání funkcí.
    Byl vytvořený jako zásuvný modul aplikačního rámce Facebook Infer v rámci
    mé bakalářské práce. Vychází z předpokladu, že sekvence, které jsou v
    programu jednou volány atomicky, by měly být pravděpodobně volány atomicky
    vždy. Tento analyzátor je implementovaný pro analýzu programů napsaných v
    jazyce C s použitím zámků typu `PThread`. I přesto, že jeden z hlavních
    cílů při návrhu Atomeru byla škálovatelnost, tak je škálovatelnost stále
    omezena při analýze rozsáhlých programů. Navíc je problém v tom, že při
    analýze reálných programů vytvářených v praxi Atomer často hlásí mnoho
    falešných chyb (dále budu používat výraz false alarm).

5:
    V rámci této práce byla navržena a implementována řada rozšíření a vylepšení Atomeru.
    Pro zlepšení škálovatelnosti byla práce se sekvencemi volání funkcí aproximována prací s množinami. K tomuto se ještě dostanu na dalších slajdech.
    Byla přidána podpora o analýzu programů napsaných v jazycích
    C++ a Java, včetně pokročilých typů zámků používaných v těchto jazycích, jako např. reentrantní zámky, monitory nebo tzv. lock guardy.
    Dále bylo pro zpřesnění analýzy implementováno rozlišování různých instancí
    zámků pomocí tzv. syntaktických access paths, což je abstraktní
    reprezentace lokace zámku na haldě. Neprovádí se žádná obecná 
    ukazatelová analýza, protože by to jinak tolik neškálovalo.
    V neposlední řade bylo provedeno rozšíření o možnost parametrizace
    analýzy uživatelem. V praxi totiž v kritických sekcích někdy bývá mnoho
    volání funkcí, což způsobuje false alarmy. Teď je možné ručně nastavit,
    které funkce se mají ignorovat nebo naopak, na které funkce se zaměřit.
    Je také možné omezit počet uvažovaných funkcí v kritických sekcích.

6:
    Na tomto slajdu je vidět, jak funguje analýza v Atomeru, když se na to
    podíváme z vyšší úrovně. Analýza funguje ve
    dvou fázích. V první fázi jsou detekovány množiny funkcí, které se
    volají atomicky. V druhé fázi je vstupní program znovu analyzován a
    hledají se takové dvojice funkcí, které by měly být volány atomicky,
    což zjistíme z množin vygenerovaných první fází, ale teď atomicky volány
    nejsou. Takové dvojice jsou potom nahlášeny jako porušení atomicity.

7,8:
    Tady podrobněji ukážu, jak fungují obě fáze analýzy Atomeru. Zároveň budu tímto 
    demonstrovat, jak jsem v rámci této práce optimalizoval škálovatelnost
    analýzy. V první fázi se dříve detekovaly sekvence funkcí, které se volají
    atomicky. Teď se tam detekují množiny takových funkcí, což je
    nadaproximace. Zlepší to škálovatelnost, protože při práci se sekvencemi se ve složitějších
    programech generovalo velké množství různých sekvencí.
    Při analýze se do souhrnů funkcí ukládají dvojice:
    množiny všech volaných funkcí v rámci dané funkce (což je použito pro
    analýzu zanořených volání) a dále se ukládají právě množiny atomických
    volání. Na slajdu vidíme funkci `f`, kde se v první atomické
    sekci volají funkce `x`, `y`, `z` a potom je tam druhá atomická sekce, kde se volají znovu 
    funkce `x`, `y`, `z`, ale
    tentokrát v opačném pořadí. V souhrnu `chi f` této funkce je
    množina všech funkcí `a`, `x`, `y`, `z` a také množiny funkcí, které jsou
    volány v kritických sekcích. Ale pro obě kritické sekce to bude stejná
    množina `x`, `y`, `z`. To šedé `chi f'` je potom to, jak vypadal souhrn
    této funkce dřív, než byla provedena aproximace množinami. Vidíme, že jsou
    tam uloženy dvě různé sekvence atomických volání, protože je různé pořadí.
    Použitím množin ztratíme tuto informaci o pořadí. Ale ušetříme čas a paměť.
    Ve druhé fázi je potom detekce dvojic funkcí, které se nevolají atomicky,
    ale které by se atomicky volat měli, protože jsou obsaženy v atomických
    množinách z první fáze. Do souhrnů se tady ukládá množina dvojic,
    které porušují atomicitu. Na
    slajdu vidíme funkci `g`. V jejím souhrnu `chi g` bude uložena dvojice `x`, `y`
    jako porušení atomicity, protože tato dvojice by se podle první
    fáze měla volat atomicky. Dvojice, které by se podle první fáze měly
    volat atomicky jsou označeny jako `omega`. Jsou to všechny dvouprvkové
    variace atomických množin z první fáze.

9:
    Byla provedena celá řada experimentů. Škálovatelnost byla ověřena na 54 nízkoúrovňových komplexních programech o celkovém počtu asi 800 000 řádků kódu. Rychlost analýzy byla zvýšena zhruba dvojnásobně, jak je ukázáno v tabulce na tomto slajdu, kde jsou vidět průměrné a celkové časy analýzy obou fází. Verze 1 je původní verze Atomeru a verze 2 je nová verze implementovaná v rámci této práce.
    Dále byly experimentálně
    analyzovány Java programy Apache Cassandra a Tomcat, které jsou
    poměrně rozsáhlé, oba asi 250 000 řádků. Byly tam úspěšně nalezeny již nahlášené opravdové
    porušení atomicity. Počet false alarmů byl snížen zhruba 4x oproti původní verzi Atomeru. Stále ovšem může být počet hlášení příliš vysoký u takhle rozsáhlých programů a proto by to chtělo provést další zpřesnění analýzy.

10:
    Abych to shrnul. V rámci této práce byl Atomer rozšířen
    a byly provedeny různé optimalizace. Konkrétně:
    aproximace sekvencí množinami, podpora C++ a Java, rozlišování různých
    instancí zámků a parametrizace analýzy. Všechno to bylo otestováno a experimentálně
    vyhodnoceno. A byly provedeny i další experimenty na programech z praxe.
    Budoucí práce by se mohla zaměřovat na další zpřesňování analýzy např. pomocí kombinace s dynamickou analýzou, statistickým vylučováním méně pravděpodobných chyb, uvažováním parametrů volaných funkcí nebo třeba použitím strojového učení pro automatické nastavování navržených parametrů analýzy.

    Ještě úplně na závěr bych chtěl zmínit, že předběžné výsledky této práce byly prezentovány na Excel@FIT 2021, kde práce získala dvě ocenění. Práce je také dlouhodobě řešena ve
    spolupráci se skupinou VeriFIT a je součástí evropského projektu Valu3s.
